{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\annaz\\\\Desktop\\\\nana14\\\\frontend\\\\src\\\\api\\\\FetchIP.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FetchIP() {\n  _s();\n  fetch(\"http://ip-api.com/json/?fields=3195137\").then(res => res.json()).then(res => console.log(res));\n  const [userTime, setUserTime] = useState('');\n  useEffect(() => {\n    // Replace 'userTimezone' with the actual user's timezone obtained from the API\n    const userTimezone = 'America/New_York';\n    const options = {\n      timeZone: userTimezone,\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric'\n    };\n    const localTime = new Date().toLocaleString(undefined, options);\n    setUserTime(localTime);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Visitor's Local Time: \", userTime]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 7\n  }, this);\n}\n_s(FetchIP, \"US9uCzWGYJM3LX8ybLhW9TdkFxc=\");\n_c = FetchIP;\nvar _c;\n$RefreshReg$(_c, \"FetchIP\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","FetchIP","_s","fetch","then","res","json","console","log","userTime","setUserTime","userTimezone","options","timeZone","weekday","year","month","day","hour","minute","second","localTime","Date","toLocaleString","undefined","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/annaz/Desktop/nana14/frontend/src/api/FetchIP.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nexport default function FetchIP() {\r\n  fetch(\"http://ip-api.com/json/?fields=3195137\")\r\n    .then((res) => res.json())\r\n    .then((res) => console.log(res));\r\n\r\n\r\n    const [userTime, setUserTime] = useState('');\r\n\r\n    useEffect(() => {\r\n      // Replace 'userTimezone' with the actual user's timezone obtained from the API\r\n      const userTimezone = 'America/New_York';\r\n  \r\n      const options = {\r\n        timeZone: userTimezone,\r\n        weekday: 'long',\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric',\r\n        hour: 'numeric',\r\n        minute: 'numeric',\r\n        second: 'numeric'\r\n      };\r\n  \r\n      const localTime = new Date().toLocaleString(undefined, options);\r\n      setUserTime(localTime);\r\n    }, []);\r\n\r\n\r\n    return(\r\n      <div>\r\n      <p>Visitor's Local Time: {userTime}</p>\r\n    </div>\r\n    );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,eAAe,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAChCC,KAAK,CAAC,wCAAwC,CAAC,CAC5CC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEC,GAAG,IAAKE,OAAO,CAACC,GAAG,CAACH,GAAG,CAAC,CAAC;EAGhC,MAAM,CAACI,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMa,YAAY,GAAG,kBAAkB;IAEvC,MAAMC,OAAO,GAAG;MACdC,QAAQ,EAAEF,YAAY;MACtBG,OAAO,EAAE,MAAM;MACfC,IAAI,EAAE,SAAS;MACfC,KAAK,EAAE,MAAM;MACbC,GAAG,EAAE,SAAS;MACdC,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE,SAAS;MACjBC,MAAM,EAAE;IACV,CAAC;IAED,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,cAAc,CAACC,SAAS,EAAEZ,OAAO,CAAC;IAC/DF,WAAW,CAACW,SAAS,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EAGN,oBACErB,OAAA;IAAAyB,QAAA,eACAzB,OAAA;MAAAyB,QAAA,GAAG,wBAAsB,EAAChB,QAAQ;IAAA;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpC,CAAC;AAEV;AAAC3B,EAAA,CAjCuBD,OAAO;AAAA6B,EAAA,GAAP7B,OAAO;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}