{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\annaz\\\\Desktop\\\\nana14\\\\frontend\\\\src\\\\api\\\\FetchIP.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FetchIP() {\n  _s();\n  const [userTime, setUserTime] = useState(\"\");\n  const [userTimezone, setUserTimezone] = useState(\"\");\n  useEffect(() => {\n    fetch(\"http://ip-api.com/json/?fields=3195137\").then(res => res.json()).then(res => {\n      setUserTimezone(res.timezone); // Update user's timezone state\n      const now = new Date();\n      const userTime = new Intl.DateTimeFormat(\"default\", {\n        timeZone: res.timezone,\n        weekday: \"long\",\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\",\n        hour: \"numeric\",\n        minute: \"numeric\",\n        second: \"numeric\"\n      }).format(now);\n      setUserTime(userTime);\n    });\n  }, []);\n\n  // useEffect(() => {\n  //   const options = {\n  //     timeZone: userTimezone,\n  //     weekday: \"long\",\n  //     year: \"numeric\",\n  //     month: \"long\",\n  //     day: \"numeric\",\n  //     hour: \"numeric\",\n  //     minute: \"numeric\",\n  //     second: \"numeric\",\n  //   };\n\n  //   fetch('http://ip-api.com/json/?fields=3195137')\n  //     .then((res) => res.json())\n  //     .then((res) => {\n  //       console.log(res.timezone)\n  //       setUserTimezone(res.timezone);\n  //       const localTime = new Date().toLocaleString(undefined, options);\n  //       setUserTime(localTime); \n  //     });\n  // }, [userTimezone]);\n\n  const userHour = new Date(userTime).getHours();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Visitor's Local Time: \", userTime.getHours()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(FetchIP, \"HB8esfo5zfqlCRNKESQ9tFVAjRo=\");\n_c = FetchIP;\nvar _c;\n$RefreshReg$(_c, \"FetchIP\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","FetchIP","_s","userTime","setUserTime","userTimezone","setUserTimezone","fetch","then","res","json","timezone","now","Date","Intl","DateTimeFormat","timeZone","weekday","year","month","day","hour","minute","second","format","userHour","getHours","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/annaz/Desktop/nana14/frontend/src/api/FetchIP.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nexport default function FetchIP() {\r\n  const [userTime, setUserTime] = useState(\"\");\r\n  const [userTimezone, setUserTimezone] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    fetch(\"http://ip-api.com/json/?fields=3195137\")\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        setUserTimezone(res.timezone); // Update user's timezone state\r\n        const now = new Date();\r\n        const userTime = new Intl.DateTimeFormat(\"default\", {\r\n          timeZone: res.timezone,\r\n          weekday: \"long\",\r\n          year: \"numeric\",\r\n          month: \"long\",\r\n          day: \"numeric\",\r\n          hour: \"numeric\",\r\n          minute: \"numeric\",\r\n          second: \"numeric\",\r\n        }).format(now);\r\n        setUserTime(userTime);\r\n      });\r\n  }, []);\r\n\r\n\r\n  // useEffect(() => {\r\n  //   const options = {\r\n  //     timeZone: userTimezone,\r\n  //     weekday: \"long\",\r\n  //     year: \"numeric\",\r\n  //     month: \"long\",\r\n  //     day: \"numeric\",\r\n  //     hour: \"numeric\",\r\n  //     minute: \"numeric\",\r\n  //     second: \"numeric\",\r\n  //   };\r\n\r\n  //   fetch('http://ip-api.com/json/?fields=3195137')\r\n  //     .then((res) => res.json())\r\n  //     .then((res) => {\r\n  //       console.log(res.timezone)\r\n  //       setUserTimezone(res.timezone);\r\n  //       const localTime = new Date().toLocaleString(undefined, options);\r\n  //       setUserTime(localTime); \r\n  //     });\r\n  // }, [userTimezone]);\r\n  \r\n  const userHour = new Date(userTime).getHours();\r\n\r\n  return (\r\n    <div>\r\n      <p>Visitor's Local Time: {userTime.getHours()}</p>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,eAAe,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAChC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACdS,KAAK,CAAC,wCAAwC,CAAC,CAC5CC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEC,GAAG,IAAK;MACbH,eAAe,CAACG,GAAG,CAACE,QAAQ,CAAC,CAAC,CAAC;MAC/B,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;MACtB,MAAMV,QAAQ,GAAG,IAAIW,IAAI,CAACC,cAAc,CAAC,SAAS,EAAE;QAClDC,QAAQ,EAAEP,GAAG,CAACE,QAAQ;QACtBM,OAAO,EAAE,MAAM;QACfC,IAAI,EAAE,SAAS;QACfC,KAAK,EAAE,MAAM;QACbC,GAAG,EAAE,SAAS;QACdC,IAAI,EAAE,SAAS;QACfC,MAAM,EAAE,SAAS;QACjBC,MAAM,EAAE;MACV,CAAC,CAAC,CAACC,MAAM,CAACZ,GAAG,CAAC;MACdR,WAAW,CAACD,QAAQ,CAAC;IACvB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;;EAGN;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMsB,QAAQ,GAAG,IAAIZ,IAAI,CAACV,QAAQ,CAAC,CAACuB,QAAQ,CAAC,CAAC;EAE9C,oBACE1B,OAAA;IAAA2B,QAAA,eACE3B,OAAA;MAAA2B,QAAA,GAAG,wBAAsB,EAACxB,QAAQ,CAACuB,QAAQ,CAAC,CAAC;IAAA;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/C,CAAC;AAEV;AAAC7B,EAAA,CAtDuBD,OAAO;AAAA+B,EAAA,GAAP/B,OAAO;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}