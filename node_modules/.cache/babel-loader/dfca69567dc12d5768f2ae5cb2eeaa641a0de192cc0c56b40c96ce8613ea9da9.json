{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\annaz\\\\Desktop\\\\nana14\\\\frontend\\\\src\\\\api\\\\FetchIP.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function FetchIP() {\n  _s();\n  const [userTime, setUserTime] = useState(\"\");\n  const [userTimezone, setUserTimezone] = useState();\n  useEffect(() => {\n    fetch(\"http://ip-api.com/json/?fields=3195137\").then(res => res.json()).then(res => {\n      setUserTimezone(res.timezone);\n      const date = new Date();\n      const utime = new Intl.DateTimeFormat('en-GB', {\n        dateStyle: 'full',\n        timeStyle: 'long',\n        timeZone: userTimezone\n      }).format(date);\n      setUserTime(utime);\n      console.log(userTime);\n    });\n  });\n\n  // useEffect(() => {\n  //   const options = {\n  //     timeZone: userTimezone,\n  //     weekday: \"long\",\n  //     year: \"numeric\",\n  //     month: \"long\",\n  //     day: \"numeric\",\n  //     hour: \"numeric\",\n  //     minute: \"numeric\",\n  //     second: \"numeric\",\n  //   };\n\n  //   fetch('http://ip-api.com/json/?fields=3195137')\n  //     .then((res) => res.json())\n  //     .then((res) => {\n  //       console.log(res.timezone)\n  //       setUserTimezone(res.timezone);\n  //       const localTime = new Date().toLocaleString(undefined, options);\n  //       setUserTime(localTime); \n  //     });\n  // }, [userTimezone]);\n\n  const date = new Date(userTime);\n  const userHour = date.getHours();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [console.log(date), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Visitor's Local Time: \", userHour]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(FetchIP, \"XvSs5osO3B/RRVTKJ9u04V2Dp9Q=\");\n_c = FetchIP;\nvar _c;\n$RefreshReg$(_c, \"FetchIP\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","FetchIP","_s","userTime","setUserTime","userTimezone","setUserTimezone","fetch","then","res","json","timezone","date","Date","utime","Intl","DateTimeFormat","dateStyle","timeStyle","timeZone","format","console","log","userHour","getHours","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/annaz/Desktop/nana14/frontend/src/api/FetchIP.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nexport default function FetchIP() {\r\n  const [userTime, setUserTime] = useState(\"\");\r\n  const [userTimezone, setUserTimezone] = useState();\r\n\r\n  useEffect(() => {\r\n    fetch(\"http://ip-api.com/json/?fields=3195137\")\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        setUserTimezone(res.timezone);\r\n\r\n        const date = new Date();\r\n\r\n        const utime =  new Intl.DateTimeFormat('en-GB', { dateStyle: 'full', timeStyle: 'long', timeZone: userTimezone }).format(date);\r\n\r\n        setUserTime(utime);\r\n        console.log(userTime)\r\n      });\r\n  });\r\n\r\n\r\n  // useEffect(() => {\r\n  //   const options = {\r\n  //     timeZone: userTimezone,\r\n  //     weekday: \"long\",\r\n  //     year: \"numeric\",\r\n  //     month: \"long\",\r\n  //     day: \"numeric\",\r\n  //     hour: \"numeric\",\r\n  //     minute: \"numeric\",\r\n  //     second: \"numeric\",\r\n  //   };\r\n\r\n  //   fetch('http://ip-api.com/json/?fields=3195137')\r\n  //     .then((res) => res.json())\r\n  //     .then((res) => {\r\n  //       console.log(res.timezone)\r\n  //       setUserTimezone(res.timezone);\r\n  //       const localTime = new Date().toLocaleString(undefined, options);\r\n  //       setUserTime(localTime); \r\n  //     });\r\n  // }, [userTimezone]);\r\n  \r\n  const date = new Date(userTime);\r\n  const userHour = date.getHours();\r\n\r\n  return (\r\n    <div>\r\n      {console.log(date)}\r\n      <p>Visitor's Local Time: {userHour}</p>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,eAAe,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAChC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,CAAC;EAElDC,SAAS,CAAC,MAAM;IACdS,KAAK,CAAC,wCAAwC,CAAC,CAC5CC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEC,GAAG,IAAK;MACbH,eAAe,CAACG,GAAG,CAACE,QAAQ,CAAC;MAE7B,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC;MAEvB,MAAMC,KAAK,GAAI,IAAIC,IAAI,CAACC,cAAc,CAAC,OAAO,EAAE;QAAEC,SAAS,EAAE,MAAM;QAAEC,SAAS,EAAE,MAAM;QAAEC,QAAQ,EAAEd;MAAa,CAAC,CAAC,CAACe,MAAM,CAACR,IAAI,CAAC;MAE9HR,WAAW,CAACU,KAAK,CAAC;MAClBO,OAAO,CAACC,GAAG,CAACnB,QAAQ,CAAC;IACvB,CAAC,CAAC;EACN,CAAC,CAAC;;EAGF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMS,IAAI,GAAG,IAAIC,IAAI,CAACV,QAAQ,CAAC;EAC/B,MAAMoB,QAAQ,GAAGX,IAAI,CAACY,QAAQ,CAAC,CAAC;EAEhC,oBACExB,OAAA;IAAAyB,QAAA,GACGJ,OAAO,CAACC,GAAG,CAACV,IAAI,CAAC,eAClBZ,OAAA;MAAAyB,QAAA,GAAG,wBAAsB,EAACF,QAAQ;IAAA;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpC,CAAC;AAEV;AAAC3B,EAAA,CAnDuBD,OAAO;AAAA6B,EAAA,GAAP7B,OAAO;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}